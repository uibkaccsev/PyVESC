# This file is autogenerated by VESC Tool
from .config_param import *

# Constants
MCCONF_SIGNATURE = 776184161
APPCONF_SIGNATURE = 486554156

params = []

def confgenerator_deserialise_mcconf(buffer, mc_configuration):
    ind = 0

    signature = int.from_bytes(buffer_pop(buffer, 4, ind), byteorder='big')
    if signature != MCCONF_SIGNATURE:
        return False

    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("pwm_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("comm_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("motor_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("sensor_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_current_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_current_min")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_in_current_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_in_current_min")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_abs_current_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_min_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_max_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_erpm_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_max_erpm_fbrake")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_max_erpm_fbrake_cc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_min_vin")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_max_vin")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_battery_cut_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_battery_cut_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("l_slow_abs_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_temp_fet_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_temp_fet_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_temp_motor_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_temp_motor_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_temp_accel_dec")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_min_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_max_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_watt_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("l_watt_min")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_current_max_scale")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_current_min_scale")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("l_duty_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("sl_min_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("sl_min_erpm_cycle_int_limit")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("sl_max_fullbreak_current_dir_change")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("sl_cycle_int_limit")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("sl_phase_advance_at_br")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("sl_cycle_int_rpm_br")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("sl_bemf_coupling_k")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[3]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[4]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[5]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[6]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("hall_table[7]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("hall_sl_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_current_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_current_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_f_zv")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_dt_us")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_encoder_inverted")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_encoder_offset")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_encoder_ratio")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_sensor_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_pll_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_pll_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_motor_l")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_motor_ld_lq_diff")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_motor_r")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_motor_flux_linkage")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_observer_gain")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_observer_gain_slow")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_observer_offset")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_duty_dowmramp_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_duty_dowmramp_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_start_curr_dec")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_start_curr_dec_rpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_openloop_rpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_openloop_rpm_low")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_d_gain_scale_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_d_gain_scale_max_mod")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_hyst")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_time_lock")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_time_ramp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_time")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_boost_q")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sl_openloop_max_q")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[3]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[4]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[5]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[6]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("foc_hall_table[7]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_hall_interp_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_sl_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_sample_v0_v7")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_sample_high_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_sat_comp_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_sat_comp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_temp_comp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_temp_comp_base_temp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_current_filter_const")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_cc_decoupling")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_observer_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_hfi_voltage_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_hfi_voltage_run")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_hfi_voltage_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_hfi_gain")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_hfi_hyst")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_sl_erpm_hfi")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("foc_hfi_start_samples")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_hfi_obs_ovr_sec")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_hfi_samples")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_offsets_cal_on_boot")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_offsets_current[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_offsets_current[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_offsets_current[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage_undriven[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage_undriven[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_offsets_voltage_undriven[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_phase_filter_enable")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_phase_filter_disable_fault")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_phase_filter_max_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_mtpa_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("foc_fw_current_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_fw_duty_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_fw_ramp_time")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("foc_fw_q_current_factor")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("foc_speed_soure")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Int16("gpd_buffer_notify_left")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Int16("gpd_buffer_interpol")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("gpd_current_filter_const")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("gpd_current_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("gpd_current_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("sp_pid_loop_rate")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("s_pid_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("s_pid_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("s_pid_kd")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("s_pid_kd_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("s_pid_min_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("s_pid_allow_braking")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("s_pid_ramp_erpms_s")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_kd")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_kd_proc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("p_pid_kd_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_ang_div")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("p_pid_gain_dec_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("p_pid_offset")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("cc_startup_boost_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("cc_min_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("cc_gain")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("cc_ramp_step_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Int32("m_fault_stop_time_ms")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_duty_ramp_step")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_current_backoff_gain")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_UInt32("m_encoder_counts")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_sin_amp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_cos_amp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_sin_offset")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_cos_offset")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_sincos_filter_constant")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_encoder_sincos_phase_correction")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("m_sensor_port_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("m_invert_direction")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("m_drv8301_oc_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("m_drv8301_oc_adj")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_bldc_f_sw_min")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_bldc_f_sw_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_dc_f_sw")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_ntc_motor_beta")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("m_out_aux_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("m_motor_temp_sens_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("m_ptc_motor_coeff")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_ntcx_ptcx_res")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("m_ntcx_ptcx_temp_base")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("m_hall_extra_samples")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("m_batt_filter_const")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("si_motor_poles")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("si_gear_ratio")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("si_wheel_diameter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("si_battery_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("si_battery_cells")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("si_battery_ah")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("si_motor_nl_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("bms.type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("bms.limit_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("bms.t_limit_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("bms.t_limit_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("bms.soc_limit_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("bms.soc_limit_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("bms.fwd_can_mode")))

    return params

def confgenerator_deserialise_appconf(buffer, app_configuration):
    ind = 0

    signature = int.from_bytes(buffer_pop(buffer, 4, ind), byteorder='big')
    if signature != APPCONF_SIGNATURE:
       return False

    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("controller_id")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_UInt32("timeout_msec")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("timeout_brake_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("can_status_rate_1")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("can_status_rate_2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("can_status_msgs_r1")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("can_status_msgs_r2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("can_baud_rate")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("pairing_done")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("permanent_uart_enabled")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("shutdown_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("can_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("uavcan_esc_index")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("uavcan_raw_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("uavcan_raw_rpm_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("uavcan_status_current_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("servo_out_enable")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("kill_sw_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_to_use")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.ctrl_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.pid_max_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.hyst")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.pulse_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.pulse_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.pulse_center")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.median_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.safe_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.throttle_exp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.throttle_exp_brake")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.throttle_exp_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.ramp_time_pos")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.ramp_time_neg")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.multi_esc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_ppm_conf.tc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.tc_max_diff")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_ppm_conf.max_erpm_for_dir")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.smart_rev_max_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_ppm_conf.smart_rev_ramp_time")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.ctrl_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.hyst")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage_min")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage_center")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage2_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_adc_conf.voltage2_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.use_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.safe_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.buttons")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.voltage_inverted")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.voltage2_inverted")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.throttle_exp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.throttle_exp_brake")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.throttle_exp_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.ramp_time_pos")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.ramp_time_neg")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.multi_esc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_adc_conf.tc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_adc_conf.tc_max_diff")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_adc_conf.update_rate_hz")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_UInt32("app_uart_baudrate")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_chuk_conf.ctrl_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.hyst")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.ramp_time_pos")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.ramp_time_neg")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.stick_erpm_per_s_in_cc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.throttle_exp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.throttle_exp_brake")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_chuk_conf.throttle_exp_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_chuk_conf.multi_esc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_chuk_conf.tc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.tc_max_diff")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_chuk_conf.use_smart_rev")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.smart_rev_max_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_chuk_conf.smart_rev_ramp_time")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_nrf_conf.speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_nrf_conf.power")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_nrf_conf.crc_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_nrf_conf.retry_delay")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("app_nrf_conf.retries")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Int8("app_nrf_conf.channel")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("app_nrf_conf.address[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("app_nrf_conf.address[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_UInt8("app_nrf_conf.address[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_nrf_conf.send_crc_ack")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_balance_conf.pid_mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.kd")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.kp2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.ki2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.kd2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.hertz")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.loop_time_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.fault_pitch")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.fault_roll")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.fault_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.fault_adc1")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.fault_adc2")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_delay_pitch")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_delay_roll")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_delay_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_delay_switch_half")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_delay_switch_full")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.fault_adc_half_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_balance_conf.fault_is_dual_switch")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_duty_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_duty_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_duty")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_hv_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_hv_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.tiltback_hv")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_lv_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_lv_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.tiltback_lv")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.tiltback_return_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.tiltback_constant")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.tiltback_constant_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.tiltback_variable")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.tiltback_variable_max")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_balance_conf.noseangling_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.startup_pitch_tolerance")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.startup_roll_tolerance")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.startup_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.deadzone")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_balance_conf.multi_esc")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.yaw_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.yaw_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.yaw_kd")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.roll_steer_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.roll_steer_erpm_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.brake_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.brake_timeout")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.yaw_current_clamp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.ki_limit")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.kd_pt1_lowpass_frequency")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.kd_pt1_highpass_frequency")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.booster_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.booster_ramp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.booster_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_start_current")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_angle_limit")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_on_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_off_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_strength")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.torquetilt_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.turntilt_strength")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.turntilt_angle_limit")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.turntilt_start_angle")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.turntilt_start_erpm")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("app_balance_conf.turntilt_speed")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.turntilt_erpm_boost")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_balance_conf.turntilt_erpm_boost_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_pas_conf.ctrl_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_pas_conf.sensor_type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_pas_conf.current_scaling")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_pas_conf.pedal_rpm_start")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_pas_conf.pedal_rpm_end")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_pas_conf.invert_pedal_direction")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_pas_conf.magnets")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("app_pas_conf.use_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_pas_conf.ramp_time_pos")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("app_pas_conf.ramp_time_neg")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("app_pas_conf.update_rate_hz")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("imu_conf.type")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("imu_conf.mode")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("imu_conf.filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("imu_conf.accel_lowpass_filter_x")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("imu_conf.accel_lowpass_filter_y")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("imu_conf.accel_lowpass_filter_z")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_Double16("imu_conf.gyro_lowpass_filter")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 2, ind)), obj)[1])(Param_UInt16("imu_conf.sample_rate_hz")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 1, ind)), obj)[1])(Param_Bool("imu_conf.use_magnetometer")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.accel_confidence_decay")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.mahony_kp")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.mahony_ki")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.madgwick_beta")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.rot_roll")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.rot_pitch")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.rot_yaw")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.accel_offsets[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.accel_offsets[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.accel_offsets[2]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.gyro_offsets[0]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.gyro_offsets[1]")))
    params.append((lambda obj: (obj.deserialise(buffer_pop(buffer, 4, ind)), obj)[1])(Param_Double32_Auto("imu_conf.gyro_offsets[2]")))

    return params

def confgenerator_set_defaults_mcconf(mc_configuration):
	raise NotImplementedError("Python not yet implemented")

def confgenerator_set_defaults_appconf(app_configuration):
	raise NotImplementedError("Python not yet implemented")

